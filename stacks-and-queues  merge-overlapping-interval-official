https://www.pepcoding.com/resources/online-java-foundation/stacks-and-queues/merge-overlapping-interval-official/ojquestion

import java.io.*;
import java.util.*;


public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[][] arr = new int[n][2];

        for (int j = 0; j < n; j++) {
            String line = br.readLine();
            arr[j][0] = Integer.parseInt(line.split(" ")[0]);
            arr[j][1] = Integer.parseInt(line.split(" ")[1]);
        }

        mergeOverlappingIntervals(arr);
    }

    public static void mergeOverlappingIntervals(int[][] arr) {
        // merge overlapping intervals and print in increasing order of start time
        
        Pair[] a = new Pair[arr.length];
        for(int i=0;i<arr.length;i++){
            a[i]=new Pair(arr[i][0],arr[i][1]);
        }
        
        // System.out.println(a.length);
        Arrays.sort(a); //sort a based on first nlogn
        // for(int i=0;i<a.length;i++){
        //     System.out.println(a[i].st+" "+a[i].et);
        // }
        
        Stack<Pair> st= new Stack<>();
        
        st.push(a[0]);
        // System.out.println(st.peek().st);
        for(int i=1;i<a.length;i++){
            int si=a[i].st; //starting interval
            int ei=a[i].et; //ending interval
            int psi=st.peek().st;  //1   previous starting interval
            int pei=st.peek().et; //previous ending interval
            if(si>=psi && si<=pei){
                if(ei>pei){
                    st.pop();
                    st.push(new Pair(psi,ei));
                }
            }else {
                st.push(a[i]);
            }
        }
        
        // System.out.println(st.size());
        Pair[] a1= new Pair[st.size()];
        for(int i=st.size()-1;i>=0;i--){
            a1[i]=st.pop();
        }
        
        // System.out.println(a1.length);
        
        
        //print
        for(int i=0;i<a1.length;i++){
            System.out.println(a1[i].st+" "+a1[i].et);
        }
        
    }
     public static class Pair implements Comparable< Pair> {
    int st;
    int et;

    Pair(int st, int et) {
      this.st = st;
      this.et = et;
    }

    public int compareTo(Pair other) {
      if (this.st != other.st) {
        return this.st - other.st;
      } else {
        return this.et - other.et;
      }
    }
  }
    
}

